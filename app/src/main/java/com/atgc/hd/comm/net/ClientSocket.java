package com.atgc.hd.comm.net;

import android.os.Handler;
import android.os.Looper;
import android.os.Message;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.Writer;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketTimeoutException;

/**
 * Created by duanjisi on 2018/1/11.
 */

public class ClientSocket implements Runnable {


    private byte[] arr = new byte[]{0x48, 0x44, 0x58, 0x4d, 0x31, 0x30, 0x30, 0x34, 0x32, 0x30, 0x31, 0x36, 0x35, 0x38, 0x46, 0x43
            , 0x44, 0x42, 0x44, 0x38, 0x33, 0x34, 0x31, 0x45, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
            , 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00
            , (byte) 0xac, 0x00, 0x00, 0x01, (byte) 0x84, 0x00, 0x00, (byte) 0xa4, 0x2b, 0x7b, 0x0a, 0x09, 0x22, 0x43, 0x6f, 0x6d
            , 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x3a, 0x09, 0x22, 0x43, 0x4f, 0x4d, 0x5f, 0x44, 0x45, 0x56, 0x5f
            , 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x22, 0x2c, 0x0a, 0x09, 0x22, 0x44, 0x61, 0x74
            , 0x61, 0x22, 0x3a, 0x09, 0x5b, 0x7b, 0x0a, 0x09, 0x09, 0x09, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22
            , 0x3a, 0x09, 0x35, 0x2c, 0x0a, 0x09, 0x09, 0x09, 0x22, 0x68, 0x61, 0x73, 0x49, 0x6e, 0x69, 0x74
            , 0x22, 0x3a, 0x09, 0x31, 0x2c, 0x0a, 0x09, 0x09, 0x09, 0x22, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65
            , 0x49, 0x44, 0x22, 0x3a, 0x09, 0x22, 0x31, 0x30, 0x30, 0x34, 0x32, 0x30, 0x31, 0x36, 0x35, 0x38
            , 0x46, 0x43, 0x44, 0x42, 0x44, 0x38, 0x33, 0x34, 0x31, 0x45, 0x22, 0x2c, 0x0a, 0x09, 0x09, 0x09
            , 0x22, 0x6d, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x22, 0x3a, 0x09, 0x22, 0x6c
            , 0x65, 0x65, 0x6c, 0x65, 0x6e, 0x22, 0x2c, 0x0a, 0x09, 0x09, 0x09, 0x22, 0x6d, 0x61, 0x63, 0x4e
            , 0x4f, 0x22, 0x3a, 0x09, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x2c, 0x0a, 0x09, 0x09, 0x09, 0x22
            , 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x22, 0x3a, 0x09, 0x22
            , 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x31, 0x32, 0x33, 0x34, 0x22, 0x2c
            , 0x0a, 0x09, 0x09, 0x09, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x09, 0x22, 0x65, 0x6c, 0x65
            , 0x76, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x2c, 0x0a
            , 0x09, 0x09, 0x09, 0x22, 0x67, 0x61, 0x74, 0x65, 0x57, 0x61, 0x79, 0x22, 0x3a, 0x09, 0x22, 0x31
            , 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x32, 0x30, 0x30, 0x2e, 0x32, 0x35, 0x34, 0x22, 0x2c
            , 0x0a, 0x09, 0x09, 0x09, 0x22, 0x69, 0x70, 0x22, 0x3a, 0x09, 0x22, 0x31, 0x39, 0x32, 0x2e, 0x31
            , 0x36, 0x38, 0x2e, 0x32, 0x30, 0x30, 0x2e, 0x31, 0x31, 0x31, 0x22, 0x2c, 0x0a, 0x09, 0x09, 0x09
            , 0x22, 0x6d, 0x61, 0x63, 0x22, 0x3a, 0x09, 0x22, 0x35, 0x38, 0x3a, 0x46, 0x43, 0x3a, 0x44, 0x42
            , 0x3a, 0x44, 0x38, 0x3a, 0x33, 0x34, 0x3a, 0x31, 0x65, 0x22, 0x2c, 0x0a, 0x09, 0x09, 0x09, 0x22
            , 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x3a, 0x09, 0x22, 0x32, 0x35, 0x35, 0x2e, 0x32, 0x35, 0x35, 0x2e
            , 0x32, 0x35, 0x35, 0x2e, 0x30, 0x22, 0x2c, 0x0a, 0x09, 0x09, 0x09, 0x22, 0x76, 0x65, 0x72, 0x73
            , 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x09, 0x22, 0x56, 0x31, 0x2e, 0x38, 0x35, 0x5f, 0x32, 0x30, 0x31
            , 0x37, 0x31, 0x32, 0x30, 0x31, 0x22, 0x0a, 0x09, 0x09, 0x7d, 0x5d, 0x0a, 0x7d};

    private static final String HOST = "172.16.10.80";
    private static final int PORT = 20001;
    private Socket client;
    private OutputStream os;
    BufferedReader br = null;
    Handler handler, revHandler;

    public ClientSocket(Handler handler) {
        this.handler = handler;
        try {
            client = new Socket(HOST, PORT);
            br = new BufferedReader(new InputStreamReader(client.getInputStream()));
            os = client.getOutputStream();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @Override
    public void run() {
        try {
            client.connect(new InetSocketAddress("1.1.9.30", 3000), 5000);
            br = new BufferedReader(new InputStreamReader(client.getInputStream()));
            os = client.getOutputStream();

            new Thread() {
                @Override
                public void run() {
                    super.run();
                    String content = null;
                    try {
                        while ((content = br.readLine()) != null) {
                            // 界面显示该数据
                            Message msg = new Message();
                            msg.what = 0x123;
                            msg.obj = content;
                            handler.sendMessage(msg);
                        }
                    } catch (IOException io) {
                        io.printStackTrace();
                    }
                }
            }.start();

            Looper.prepare();
            revHandler = new Handler() {
                @Override
                public void handleMessage(Message msg) {
                    // 接收到UI线程的中用户输入的数据
                    if (msg.what == 0x345) {
                        // 将用户在文本框输入的内容写入网络
                        try {
//                            os.write((msg.obj.toString() + "\r\n")
//                                    .getBytes("gbk"));
                            os.write(arr);
                        } catch (Exception e) {
                            e.printStackTrace();
                        }
                    }
                }

            };
            // 启动Looper
            Looper.loop();

        } catch (SocketTimeoutException e) {
            Message msg = new Message();
            msg.what = 0x123;
            msg.obj = "网络连接超时！";
            handler.sendMessage(msg);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }
}
