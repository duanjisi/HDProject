package com.atgc.hd;

import android.app.Activity;
import android.os.Bundle;
import android.os.Handler;
import android.os.Message;
import android.support.annotation.Nullable;
import android.util.Log;
import android.view.View;
import android.widget.TextView;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.OutputStream;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.net.InetSocketAddress;
import java.net.Socket;
import java.net.SocketTimeoutException;

/**
 * Created by duanjisi on 2018/1/11.
 */

public class SecondActivity extends Activity {
    private byte[] arr = new byte[]{0x48, 0x44, 0x58, 0x4d, 0x31, 0x30, 0x30, 0x34, 0x32, 0x30, 0x31, 0x36, 0x35, 0x38, 0x46, 0x43
            , 0x44, 0x42, 0x44, 0x38, 0x33, 0x34, 0x31, 0x45, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30
            , 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x00, 0x00, 0x00, 0x00
            , (byte) 0xac, 0x00, 0x00, 0x01, (byte) 0x84, 0x00, 0x00, (byte) 0xa4, 0x2b, 0x7b, 0x0a, 0x09, 0x22, 0x43, 0x6f, 0x6d
            , 0x6d, 0x61, 0x6e, 0x64, 0x22, 0x3a, 0x09, 0x22, 0x43, 0x4f, 0x4d, 0x5f, 0x44, 0x45, 0x56, 0x5f
            , 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x22, 0x2c, 0x0a, 0x09, 0x22, 0x44, 0x61, 0x74
            , 0x61, 0x22, 0x3a, 0x09, 0x5b, 0x7b, 0x0a, 0x09, 0x09, 0x09, 0x22, 0x74, 0x79, 0x70, 0x65, 0x22
            , 0x3a, 0x09, 0x35, 0x2c, 0x0a, 0x09, 0x09, 0x09, 0x22, 0x68, 0x61, 0x73, 0x49, 0x6e, 0x69, 0x74
            , 0x22, 0x3a, 0x09, 0x31, 0x2c, 0x0a, 0x09, 0x09, 0x09, 0x22, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65
            , 0x49, 0x44, 0x22, 0x3a, 0x09, 0x22, 0x31, 0x30, 0x30, 0x34, 0x32, 0x30, 0x31, 0x36, 0x35, 0x38
            , 0x46, 0x43, 0x44, 0x42, 0x44, 0x38, 0x33, 0x34, 0x31, 0x45, 0x22, 0x2c, 0x0a, 0x09, 0x09, 0x09
            , 0x22, 0x6d, 0x75, 0x66, 0x61, 0x63, 0x74, 0x75, 0x72, 0x65, 0x72, 0x22, 0x3a, 0x09, 0x22, 0x6c
            , 0x65, 0x65, 0x6c, 0x65, 0x6e, 0x22, 0x2c, 0x0a, 0x09, 0x09, 0x09, 0x22, 0x6d, 0x61, 0x63, 0x4e
            , 0x4f, 0x22, 0x3a, 0x09, 0x31, 0x32, 0x33, 0x34, 0x35, 0x36, 0x2c, 0x0a, 0x09, 0x09, 0x09, 0x22
            , 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x64, 0x64, 0x72, 0x22, 0x3a, 0x09, 0x22
            , 0x6c, 0x6f, 0x67, 0x69, 0x63, 0x5f, 0x61, 0x64, 0x64, 0x72, 0x31, 0x32, 0x33, 0x34, 0x22, 0x2c
            , 0x0a, 0x09, 0x09, 0x09, 0x22, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x3a, 0x09, 0x22, 0x65, 0x6c, 0x65
            , 0x76, 0x61, 0x74, 0x6f, 0x72, 0x20, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x22, 0x2c, 0x0a
            , 0x09, 0x09, 0x09, 0x22, 0x67, 0x61, 0x74, 0x65, 0x57, 0x61, 0x79, 0x22, 0x3a, 0x09, 0x22, 0x31
            , 0x39, 0x32, 0x2e, 0x31, 0x36, 0x38, 0x2e, 0x32, 0x30, 0x30, 0x2e, 0x32, 0x35, 0x34, 0x22, 0x2c
            , 0x0a, 0x09, 0x09, 0x09, 0x22, 0x69, 0x70, 0x22, 0x3a, 0x09, 0x22, 0x31, 0x39, 0x32, 0x2e, 0x31
            , 0x36, 0x38, 0x2e, 0x32, 0x30, 0x30, 0x2e, 0x31, 0x31, 0x31, 0x22, 0x2c, 0x0a, 0x09, 0x09, 0x09
            , 0x22, 0x6d, 0x61, 0x63, 0x22, 0x3a, 0x09, 0x22, 0x35, 0x38, 0x3a, 0x46, 0x43, 0x3a, 0x44, 0x42
            , 0x3a, 0x44, 0x38, 0x3a, 0x33, 0x34, 0x3a, 0x31, 0x65, 0x22, 0x2c, 0x0a, 0x09, 0x09, 0x09, 0x22
            , 0x6d, 0x61, 0x73, 0x6b, 0x22, 0x3a, 0x09, 0x22, 0x32, 0x35, 0x35, 0x2e, 0x32, 0x35, 0x35, 0x2e
            , 0x32, 0x35, 0x35, 0x2e, 0x30, 0x22, 0x2c, 0x0a, 0x09, 0x09, 0x09, 0x22, 0x76, 0x65, 0x72, 0x73
            , 0x69, 0x6f, 0x6e, 0x22, 0x3a, 0x09, 0x22, 0x56, 0x31, 0x2e, 0x38, 0x35, 0x5f, 0x32, 0x30, 0x31
            , 0x37, 0x31, 0x32, 0x30, 0x31, 0x22, 0x0a, 0x09, 0x09, 0x7d, 0x5d, 0x0a, 0x7d};

    private TextView tvRegister, txt1;
    private static final String HOST = "172.16.10.80";
    private static final int PORT = 20001;

    Socket socket = null;
    String buffer = "";
    public Handler myHandler = new Handler() {
        @Override
        public void handleMessage(Message msg) {
            if (msg.what == 0x11) {
                Bundle bundle = msg.getData();
                txt1.append("server:" + bundle.getString("msg") + "\n");
            }
        }

    };

    @Override
    protected void onCreate(@Nullable Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.second_activity);
        initViews();
    }

    private void initViews() {
        tvRegister = findViewById(R.id.tv_device_register);
        txt1 = findViewById(R.id.tv_str);

        tvRegister.setOnClickListener(new View.OnClickListener() {
            @Override
            public void onClick(View view) {
                new MyThread().start();
            }
        });
    }


    class MyThread extends Thread {

        public String txt1;
        public MyThread() {
        }

        @Override
        public void run() {
            //定义消息
            Message msg = new Message();
            msg.what = 0x11;
            Bundle bundle = new Bundle();
            bundle.clear();
            try {
                //连接服务器 并设置连接超时为5秒
//                socket = new Socket();
                socket = new Socket(HOST, PORT);
//                socket.connect(new InetSocketAddress(HOST, PORT), 5000);
                //获取输入输出流
                OutputStream ou = socket.getOutputStream();
                BufferedReader bff = new BufferedReader(new InputStreamReader(
                        socket.getInputStream()));
                //读取发来服务器信息
                String line = null;
                buffer = "";
                while ((line = bff.readLine()) != null) {
                    buffer = line + buffer;
                }

                //向服务器发送信息
                ou.write("android 客户端".getBytes("gbk"));
//                ou.write(arr);
                ou.flush();
                bundle.putString("msg", buffer.toString());
                msg.setData(bundle);
                //发送消息 修改UI线程中的组件
                myHandler.sendMessage(msg);
                //关闭各种输入输出流
                bff.close();
                ou.close();
                socket.close();
            } catch (SocketTimeoutException aa) {
                String str = aa.getMessage();
                Log.i("info", "exception:DDDD" + aa.getMessage());
                //连接超时 在UI界面显示消息
                bundle.putString("msg", "服务器连接失败！请检查网络是否打开");
                msg.setData(bundle);
                //发送消息 修改UI线程中的组件
                myHandler.sendMessage(msg);
            } catch (IOException e) {
                e.printStackTrace();
                bundle.putString("msg", e.getMessage());
                msg.setData(bundle);
                //发送消息 修改UI线程中的组件
                myHandler.sendMessage(msg);
            }
        }
    }
}
